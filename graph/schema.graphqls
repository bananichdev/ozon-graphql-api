type Post {
  id: ID!
  author: String!
  title: String!
  content: String!
  commentsDisabled: Boolean!
  comments: [Comment!]!
  createdAt: Time!
}

type Comment {
  id: ID!
  author: String!
  postId: ID!
  parentId: ID
  content: String!
  replies: [Comment!]!
  createdAt: Time!
}

type Query {
  getPosts: [Post!]!
  getPost(id: ID!): Post!
  getComments(postId: Int!, first: Int = 25, skip: Int = 0): [Comment!]!
}

input NewPost {
  author: String!
  title: String!
  content: String!
  commentsDisabled: Boolean!
}

input NewComment {
  author: String!
  postId: ID!
  parentId: ID
  content: String!
}

type Mutation {
  createPost(input: NewPost!): Post!
  createComment(input: NewComment!): Comment!
}

type Subscription {
  commentAdded(postId: ID!): Comment!
}

scalar Time
